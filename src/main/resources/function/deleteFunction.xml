<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<template xmlns="http://ws.apache.org/ns/synapse" name="deleteFunction">
    <parameter name="functionName" description="Name of the Lambda function to be deleted"/>
    <parameter name="qualifier" description="version of function to delete the specified version"/>

    <sequence>
        <property name="uri.var.functionName" expression="$func:functionName"/>
        <property name="uri.var.qualifier" expression="$func:qualifier"/>
        <property name="httpMethod" value="DELETE"/>

        <property name="uri.var.uriRemainder" value=""/>
        <property name="uri.var.uriRemainder"
                  expression="fn:concat('/2015-03-31/functions/', $ctx:uri.var.functionName)"/>

        <script language="js">
            <![CDATA[
            var queryParameter = '';
            var qualifier = mc.getProperty('uri.var.qualifier');

            if (qualifier != null && qualifier != "")
            {
                queryParameter = "?Qualifier=" + encodeURIComponent(qualifier);
            }

            mc.setProperty('uri.var.queryParameter', queryParameter.toString());
           ]]>

        </script>


        <class name="org.wso2.carbon.esb.connector.auth.AmazonLambdaAuthConnector"/>

        <header name="Authorization" scope="transport" expression="$ctx:authorizationHeader"/>
        <header name="X-Amz-Date" scope="transport" expression="$ctx:x-amz-date"/>


        <payloadFactory media-type="json">
            <format/>
            <args/>
        </payloadFactory>
        <property name="NO_ENTITY_BODY" value="true" scope="axis2" type="BOOLEAN"/>

        <!--<log>-->
        <!--<property name="****************proxy*****************"-->
        <!--value="################################"/>-->
        <!--<property expression="$ctx:uri.var.apiUrl" name="apiUrl"/>-->
        <!--<property expression="$ctx:uri.var.uriRemainder" name="uriRemainder"/>-->
        <!--<property expression="$ctx:uri.var.queryParameter" name="queryParameter"/>-->
        <!--<property expression="$ctx:requestPayload" name="requestPayload"/>-->


        <!--</log>-->
        <!--<property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>-->
        <filter source="$ctx:amazonLambdaBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="DELETE"
                              uri-template="{uri.var.apiUrl}{+uri.var.uriRemainder}{+uri.var.queryParameter}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="DELETE"
                              uri-template="{uri.var.apiUrl}{+uri.var.uriRemainder}{+uri.var.queryParameter}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>
